{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":4226692,"sourceType":"datasetVersion","datasetId":2491159}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\ndf = pd.read_csv('/kaggle/input/car-price-predictionused-cars/car data.csv')\ndf\ndf.info()\ndf.isnull().sum()\ndf.shape\ndf.describe()\ndf.Car_Name.unique()\ndf.Fuel_Type.value_counts()\ndf.Transmission.value_counts()\ndf.Selling_type.value_counts()\ndf.Selling_Price.value_counts()\ndf.Present_Price.value_counts()\ndf.Driven_kms.value_counts()\ndf.Year.value_counts()\ndf.Owner.value_counts()\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(7, 5))\nsns.distplot(df.Present_Price)\nplt.show()\nplt.figure(figsize=(9,9))\nsns.pairplot(df,diag_kind=\"kde\", diag_kws=dict(shade=True, bw=.05, vertical=False))\nplt.show()\nx = df.drop(['Year', 'Car_Name', 'Selling_Price', 'Driven_kms',\t'Fuel_Type', 'Selling_type',\t'Transmission', 'Owner'], axis=1)\nx\ny = df['Present_Price']\ny\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1234)\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(x_train,y_train)\ny_pred = model.predict(x_train)\ny_pred\nfrom sklearn import metrics\n\nerror_square = metrics.r2_score(y_train, y_pred)\nprint(\"Error square: \", error_square)\nplt.scatter(y_train,y_pred)\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\nplt.title(\"Actual vs Predicted\")\nplt.show()\nfrom sklearn.linear_model import Lasso\n\nmodel1 = Lasso()\nmodel1.fit(x_train, y_train)\ny_pred1 = model1.predict(x_train)\ny_pred1\nerror_square = metrics.r2_score(y_train, y_pred1)\nprint(\"Error square: \", error_square)\nplt.scatter(y_train, y_pred1)\nplt.xlabel('Actual price')\nplt.ylabel('Predicted price')\nplt.title(\"Actual vs Predicted\")\nplt.show()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-25T09:23:27.192038Z","iopub.execute_input":"2024-06-25T09:23:27.193043Z","iopub.status.idle":"2024-06-25T09:23:36.059680Z","shell.execute_reply.started":"2024-06-25T09:23:27.193006Z","shell.execute_reply":"2024-06-25T09:23:36.058415Z"},"trusted":true},"execution_count":null,"outputs":[]}]}